# -*- coding: utf-8 -*-
"""Bengali_numeral_handwritten_digit_recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HtQeaFMY2Jlpu5E9mDtiBRvVRSr5slNl
"""

# !pip install mrcnn
#
# from google.colab import drive
# drive.mount('/content/drive')

import os
import sys
import json
import datetime
import numpy as np
import skimage.draw
import cv2
from mrcnn.visualize import display_instances
import matplotlib.pyplot as plt

ROOT_DIR = os.getcwd()

from mrcnn.config import Config
from mrcnn import model as modellib, utils

DEFAULT_LOGS_DIR = os.path.join(ROOT_DIR, "logs")
COCO_WEIGHTS_PATH = os.path.join(ROOT_DIR, "mask_rcnn_coco.h5")
DIGIT_LIST = ['zero', 'one', 'two', 'three', 'four', 'five', 'seven', 'eight', 'nine', 'ten']


class CustomConfig(Config):
    """Configuration for training on the custom  dataset.
    Derives from the base Config class and overrides some values.
    """
    # Give the configuration a recognizable name
    NAME = "object"

    GPU_COUNT = 0
    # We use a GPU with 12GB memory, which can fit two images.
    # Adjust down if you use a smaller GPU.
    IMAGES_PER_GPU = 0

    # Number of classes (including background)
    NUM_CLASSES = 1 + 10  # Background + phone,laptop and mobile

    # Number of training steps per epoch
    STEPS_PER_EPOCH = 10

    # Skip detections with < 90% confidence
    DETECTION_MIN_CONFIDENCE = 0.8


# !unzip '/content/drive/MyDrive/Colab Notebooks/dataset/val.zip' -d '/content/drive/MyDrive/Colab Notebooks/dataset'
# !unzip '/content/drive/MyDrive/Colab Notebooks/dataset/train.zip' -d '/content/drive/MyDrive/Colab Notebooks/dataset'

############################################################
#  Dataset
############################################################

class CustomDataset(utils.Dataset):

    def load_custom(self, dataset_dir, subset):
        """Load a subset of the Dog-Cat dataset.
        dataset_dir: Root directory of the dataset.
        subset: Subset to load: train or val
        """
        # Add classes. We have only one class to add.
        for i in range(len(DIGIT_LIST)):
            self.add_class("object", i, DIGIT_LIST[i])

        # Train or validation dataset?
        assert subset in ["train", "val"]
        dataset_dir = os.path.join(dataset_dir, subset)

        # Load annotations
        # VGG Image Annotator saves each image in the form:
        # { 'filename': '28503151_5b5b7ec140_b.jpg',
        #   'regions': {
        #       '0': {
        #           'region_attributes': {},
        #           'shape_attributes': {
        #               'all_points_x': [...],
        #               'all_points_y': [...],
        #               'name': 'polygon'}},
        #       ... more regions ...
        #   },
        #   'size': 100202
        # }
        # We mostly care about the x and y coordinates of each region

        # annotations1 = json.load(open('D:/MaskRCNN-main/Dataset/train/via_project.json'))
        # # print(annotations1)
        # annotations = list(annotations1.values())  # don't need the dict keys

        # # The VIA tool saves images in the JSON even if they don't have any
        # # annotations. Skip unannotated images.
        # annotations = [a for a in annotations if a['regions']]

        # Add images
        # for a in annotations:
        #     # print(a)
        #     # Get the x, y coordinaets of points of the polygons that make up
        #     # the outline of each object instance. There are stores in the
        #     # shape_attributes (see json format above)
        #     polygons = [r['shape_attributes'] for r in a['regions']]
        #     objects = [s['region_attributes']['name'] for s in a['regions']]
        #     print("objects:", objects)
        #     # name_dict = {"laptop": 1,"tab": 2,"phone": 3}
        #     name_dict = {"Horse": 1, "Man": 2}  # ,"xyz": 3}
        #     # key = tuple(name_dict)
        #     num_ids = [name_dict[a] for a in objects]

        #     # num_ids = [int(n['Event']) for n in objects]
        #     # load_mask() needs the image size to convert polygons to masks.
        #     # Unfortunately, VIA doesn't include it in JSON, so we must read
        #     # the image. This is only managable since the dataset is tiny.
        #     print("numids", num_ids)
        #     image_path = os.path.join(dataset_dir, a['filename'])
        #     image = skimage.io.imread(image_path)
        #     height, width = image.shape[:2]

        #     self.add_image(
        #         "object",  ## for a single class just add the name here
        #         image_id=a['filename'],  # use file name as a unique image id
        #         path=image_path,
        #         width=width, height=height,
        #         polygons=polygons,
        #         num_ids=num_ids
        #     )
        # add images of our own custom dataset


        for imageName in os.listdir(dataset_dir):
            xList = [0, 0, image.shape[1] - 1, image.shape[1] - 1]
            yList = [0, image.shape[0] - 1, image.shape[0] - 1, 0]
            polygons = [{"all_points_x": xList, "all_points_y": yList, "name": "polygon"}]

            class_id = int(imageName.split('_')[0])
            num_ids = [class_id]
            image_path = os.path.join(dataset_dir, imageName)
            image = skimage.io.imread(image_path)
            height, width = image.shape[:2]

            self.add_image(
                "object",  ## for a single class just add the name here
                image_id=imageName,  # use file name as a unique image id
                path=image_path,
                width=width, height=height,
                polygons=polygons,
                num_ids=num_ids
            )

    def load_mask(self, image_id):
        """Generate instance masks for an image.
       Returns:
        masks: A bool array of shape [height, width, instance count] with
            one mask per instance.
        class_ids: a 1D array of class IDs of the instance masks.
        """
        # If not a Dog-Cat dataset image, delegate to parent class.
        image_info = self.image_info[image_id]
        if image_info["source"] != "object":
            return super(self.__class__, self).load_mask(image_id)

        # Convert polygons to a bitmap mask of shape
        # [height, width, instance_count]
        info = self.image_info[image_id]
        if info["source"] != "object":
            return super(self.__class__, self).load_mask(image_id)
        num_ids = info['num_ids']
        mask = np.zeros([info["height"], info["width"], len(info["polygons"])],
                        dtype=np.uint8)
        for i, p in enumerate(info["polygons"]):
            # Get indexes of pixels inside the polygon and set them to 1
            rr, cc = skimage.draw.polygon(p['all_points_y'], p['all_points_x'])

            mask[rr, cc, i] = 1

        # Return mask, and array of class IDs of each instance. Since we have
        # one class ID only, we return an array of 1s
        # Map class names to class IDs.
        num_ids = np.array(num_ids, dtype=np.int32)
        return mask, num_ids  # np.ones([mask.shape[-1]], dtype=np.int32)

    def image_reference(self, image_id):
        """Return the path of the image."""
        info = self.image_info[image_id]
        if info["source"] == "object":
            return info["path"]
        else:
            super(self.__class__, self).image_reference(image_id)


def train(model):
    """Train the model."""
    # Training dataset.
    dataset_train = CustomDataset()
    dataset_train.load_custom(os.path.join(ROOT_DIR, 'dataset'), "train")
    dataset_train.prepare()

    # Validation dataset
    dataset_val = CustomDataset()
    dataset_val.load_custom(os.path.join(ROOT_DIR, 'dataset'), "val")
    dataset_val.prepare()

    # *** This training schedule is an example. Update to your needs ***
    # Since we're using a very small dataset, and starting from
    # COCO trained weights, we don't need to train too long. Also,
    # no need to train all layers, just the heads should do it.
    print("Training network heads")
    model.train(dataset_train, dataset_val,
                learning_rate=config.LEARNING_RATE,
                epochs=20,
                layers='heads')


if not os.path.exists(DEFAULT_LOGS_DIR):
    os.makedirs(DEFAULT_LOGS_DIR)

# %tensorflow_version 1.x 
# !pip install keras==2.1.5

config = CustomConfig()
model = modellib.MaskRCNN(mode="training", config=config, model_dir=DEFAULT_LOGS_DIR)

weights_path = COCO_WEIGHTS_PATH
# Download weights file
if not os.path.exists(weights_path):
    utils.download_trained_weights(weights_path)

model.load_weights(weights_path, by_name=True, exclude=[
    "mrcnn_class_logits", "mrcnn_bbox_fc",
    "mrcnn_bbox", "mrcnn_mask"])

train(model)
